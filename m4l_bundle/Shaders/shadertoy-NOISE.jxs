<jittershader name="default">
	<description> Default Slab </description>
	<param name="iTime" type="float" default="1.0" />
	<param name="tex0" type="int" default="0" />
	<param name="iResolution" type="vec2"  state="VIEWPORT" /> //default="1920, 1080" />
	<param name="iMouse" type="vec2" state="VIEWPORT" />

	<param name="movement" type="float" default="3.5" />
	<param name="complexity" type="float" default="2.2" />
	<param name="complexity2" type="float" default="2.2" />
	<param name="saturation" type="float" default="0.5" />
	<param name="hue_map" type="float" default="1.1" />
	<param name="tau_map" type="float" default="1.5" />
	<param name="light" type="float" default="0.5" />
	<param name="intricate" type="float" default="0.5" />
	<param name="rotate_map" type="float" default="0.2" />
	<param name="radioactive" type="float" default="30" />

	<param name="cos_map" type="float" default="-1." />
	<language name="glsl" version="1.0">
		<bind param="iTime" program="fp" />
		<bind param="iResolution" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="iMouse" program="fp" />

		<bind param="movement" program="fp" />
		<bind param="complexity" program="fp" />
		<bind param="complexity2" program="fp" />
		<bind param="saturation" program="fp" />
		<bind param="hue_map" program="fp" />
		<bind param="tau_map" program="fp" />
		<bind param="cos_map" program="fp" />
		<bind param="light" program="fp" />
		<bind param="intricate" program="fp" />
		<bind param="rotate_map" program="fp" />
		<bind param="radioactive" program="fp" />
		
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
varying vec2 iResolution;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
		iResolution = vec2 (abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord;
uniform vec2 iResolution;
uniform vec2 iMouse;
uniform sampler2DRect tex0;
uniform float iTime;
uniform float ratio;
uniform float movement;
uniform float saturation;
uniform float hue_map;
uniform float cos_map;
uniform float tau_map;
uniform float light;
uniform float intricate;
uniform float rotate_map;
uniform float complexity;
uniform float complexity2;
uniform float radioactive;


mat2 r2d(float a) {
	float c = cos(a), s = sin(a);
	return mat2(c, s, -s, c);
}

vec2 path(float t) {
	float a = sin(t*.2 + 1.5), b = sin(t*.2);
	return vec2(2.*a, a*b);
}

float g = 0.;
float de(vec3 p) {
	p.xy -= path(p.z);

	float d = -length(p.xy) + 4.;// tunnel (inverted cylinder)

	p.xy += vec2(cos(p.z + iTime)*sin(iTime), cos(p.z + iTime));
	p.z -= 6. + iTime * 6.;
	d = min(d, dot(p, normalize(sign(p))) - 1.); // octahedron (LJ's formula)
	// I added this in the last 1-2 minutes, but I'm not sure if I like it actually!

	// Trick inspired by balkhan's shadertoys.
	// Usually, in raymarch shaders it gives a glow effect,
	// here, it gives a colors patchwork & transparent voxels effects.
	g += .015 / (.01 + d * d);
	return d;
}

///INSERT SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////
/// Change fragcoord and fragcolor by gl_FragCoord and gl_FragColor
/// Replace void main(xxxxxxxxxxxxxxxxx) by void main(void)

#define PI acos(cos_map)
#define TAU PI*tau_map
vec2 rotate(vec2 p, float a)
{
    return mat2(cos(a),sin(a),-sin(a),cos(a))*p;
}

vec3 rotate(vec3 p,vec3 axis,float theta)
{
    vec3 v = cross(axis,p), u = cross(v, axis);
    return u * cos(theta) + v * sin(theta) + axis * dot(p, axis);   
}

vec2 pmod(vec2 p, float r)
{
    float a = mod(atan(p.y, p.x), TAU / r) - 0.5 * TAU / r;
    return length(p) * vec2(-sin(a), cos(a));
}

vec3 hue(float t){
	return cos((vec3(0,hue_map,-2)/3.+t)*TAU)*saturation+light;
}

float map(vec3 p)
{
    p.z -= iTime*3.;
    p = asin(sin(p/complexity))*complexity2;
    p.xy = rotate(p.xy,iTime*rotate_map);
    p.yz = rotate(p.yz,iTime*intricate);
    for(int i=0;i<5;i++)
    {
        p.xy = pmod(p.xy,12.0);
        p.y-=4.0;
        p.yz = pmod(p.yz,16.0);
        p.z-=6.8;
    }
    return abs(dot(abs(p),rotate(normalize(vec3(2,1,3)),normalize(vec3(7,1,2)),1.8))-0.3);
}

void main(void)
{
   vec2 uv = (gl_FragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;
 	vec3 ro=vec3(0,0,movement);
 	vec3 ta = vec3(1,0,0);
 	ta.xz=rotate(ta.xz,iTime*0.2);
 	
 	vec3 w=normalize(ta-ro);
 	vec3 u=normalize(cross(w,vec3(0,1,0)));
    vec3 rd=mat3(u,cross(u,w),w)*normalize(vec3(uv,2));
    vec3 col = vec3(0);
    float d,t=5.0;
    for(float i=1.0;i>0.0;i-=1.0/radioactive)
    {
     	t+=d=map(ro+t*rd);
        if(d<0.001)
        {
            col+=mix(vec3(1),hue(length(ro+t*rd)*0.1+iTime*0.1),0.6)*i*i;
            break;
        }
    }
    gl_FragColor = vec4(col, 1.0);
}
///END SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////////

]]>
		</program>
	</language>
</jittershader>
