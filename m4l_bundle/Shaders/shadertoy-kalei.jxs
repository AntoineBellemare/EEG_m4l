<jittershader name="default">
	<description> Default Slab </description>
	<param name="iTime" type="float" default="1.0" />
	<param name="tex0" type="int" default="0" />
	<param name="iResolution" type="vec2"  state="VIEWPORT" /> //default="1920, 1080" />
	<param name="iMouse" type="vec2" state="VIEWPORT" />

	<param name="symmetry" type="float" default="5.0" />
	<param name="complexity" type="float" default="2.2" />
	<param name="theta_offset" type="float" default="0.5" />
	<param name="zoom" type="float" default="0.5" />

	<param name="intrication" type="float" default="0.5" />
	<language name="glsl" version="1.0">
		<bind param="iTime" program="fp" />
		<bind param="iResolution" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="iMouse" program="fp" />

		<bind param="symmetry" program="fp" />
		<bind param="complexity" program="fp" />
		<bind param="theta_offset" program="fp" />
		<bind param="zoom" program="fp" />
		<bind param="intrication" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
varying vec2 iResolution;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
		iResolution = vec2 (abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord;
uniform vec2 iResolution;
uniform vec2 iMouse;
uniform sampler2DRect tex0;
uniform float iTime;
uniform float ratio;
uniform float symmetry;
uniform float theta_offset;
uniform float zoom;
uniform float intrication;
uniform float complexity;


mat2 r2d(float a) {
	float c = cos(a), s = sin(a);
	return mat2(c, s, -s, c);
}

vec2 path(float t) {
	float a = sin(t*.2 + 1.5), b = sin(t*.2);
	return vec2(2.*a, a*b);
}

float g = 0.;
float de(vec3 p) {
	p.xy -= path(p.z);

	float d = -length(p.xy) + 4.;// tunnel (inverted cylinder)

	p.xy += vec2(cos(p.z + iTime)*sin(iTime), cos(p.z + iTime));
	p.z -= 6. + iTime * 6.;
	d = min(d, dot(p, normalize(sign(p))) - 1.); // octahedron (LJ's formula)
	// I added this in the last 1-2 minutes, but I'm not sure if I like it actually!

	// Trick inspired by balkhan's shadertoys.
	// Usually, in raymarch shaders it gives a glow effect,
	// here, it gives a colors patchwork & transparent voxels effects.
	g += .015 / (.01 + d * d);
	return d;
}

///INSERT SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////
/// Change fragcoord and fragcolor by gl_FragCoord and gl_FragColor
/// Replace void main(xxxxxxxxxxxxxxxxx) by void main(void)

#define PI 3.14159265359
#define rot(a) mat2(cos(a + PI*0.25*vec4(0,6,2,0)))

void main(void)
{
	vec2 uv = gl_FragCoord.xy - iResolution.xy * 0.5;
    uv /= iResolution.y;
    uv *= cos(iTime*zoom) + 1.5;
    
    gl_FragColor.rgb = vec3(0);
    
    float scale = PI/symmetry;
    float m = 0.35;
    
    for (int i = 0 ; i < 10 ; i++) {
        float scaleFactor = float(i)+(sin(iTime*0.05) + 1.5);
        uv *= rot(iTime * scaleFactor * 0.01);
        float theta = atan(uv.x, uv.y)+PI;
        theta = (floor(theta/scale)+theta_offset)*scale;
        vec2 dir = vec2(sin(theta), cos(theta));
        vec2 codir = dir.yx * vec2(-1, 1);
        uv = vec2(dot(dir, uv), dot(codir, uv));
        uv.xy += vec2(sin(iTime),cos(iTime*1.1)) * scaleFactor * 0.035;
        uv = abs(fract(uv+intrication)*complexity-1.0)*0.7;
        vec3 p = vec3(1,5,9);
        gl_FragColor.rgb += exp(-min(uv.x, uv.y)*16.) * (cos(p*float(i)+iTime*0.5)*.5+.5)*m ;
        m *= 0.9;
        
    }
    
    
    gl_FragColor.rgb *= 1.2;
	gl_FragColor.a = 20.0;
}

///END SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////////

]]>
		</program>
	</language>
</jittershader>
