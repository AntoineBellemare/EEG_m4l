<jittershader name="default">
	<description> Default Slab </description>
	<param name="iTime" type="float" default="1.0" />
	<param name="tex0" type="int" default="0" />
	<param name="iResolution" type="vec2"  state="VIEWPORT" /> //default="1920, 1080" />
	<param name="iMouse" type="vec2" state="VIEWPORT" />

	<param name="complexity1" type="float" default="1.0" />
	<param name="complexity2" type="float" default="0.5" />
	<param name="complexity3" type="float" default="2.5" />

	<param name="red" type="float" default="0.01" />
	<language name="glsl" version="1.0">
		<bind param="iTime" program="fp" />
		<bind param="iResolution" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="iMouse" program="fp" />

		<bind param="complexity1" program="fp" />
		<bind param="complexity2" program="fp" />
		<bind param="complexity3" program="fp" />
		<bind param="red" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
varying vec2 iResolution;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
		iResolution = vec2 (abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord;
uniform vec2 iResolution;
uniform vec2 iMouse;
uniform sampler2DRect tex0;
uniform float iTime;
uniform float ratio;
uniform float complexity1;
uniform float complexity2;
uniform float complexity3;
uniform float red;


mat2 r2d(float a) {
	float c = cos(a), s = sin(a);
	return mat2(c, s, -s, c);
}

vec2 path(float t) {
	float a = sin(t*.2 + 1.5), b = sin(t*.2);
	return vec2(2.*a, a*b);
}

float g = 0.;
float de(vec3 p) {
	p.xy -= path(p.z);

	float d = -length(p.xy) + 4.;// tunnel (inverted cylinder)

	p.xy += vec2(cos(p.z + iTime)*sin(iTime), cos(p.z + iTime));
	p.z -= 6. + iTime * 6.;
	d = min(d, dot(p, normalize(sign(p))) - 1.); // octahedron (LJ's formula)
	// I added this in the last 1-2 minutes, but I'm not sure if I like it actually!

	// Trick inspired by balkhan's shadertoys.
	// Usually, in raymarch shaders it gives a glow effect,
	// here, it gives a colors patchwork & transparent voxels effects.
	g += .015 / (.01 + d * d);
	return d;
}

///INSERT SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////
/// Change fragcoord and fragcolor by gl_FragCoord and gl_FragColor
/// Replace void main(xxxxxxxxxxxxxxxxx) by void main(void)

// #define DEBUG_PALETTE

/*
 A noise function mirrored and thresholded to maximize the value at the center of the screen
 Combined with a second layer of noise to produce an ink on paper effect
*/

vec3 inkColor = vec3(red, 0.01, 0.1);
const vec3 paperColor = vec3(1.0, 0.98, 0.94);

const float speed = 0.0075;
const float shadeContrast = 0.45;

//3D simplex noise from: https://www.shadertoy.com/view/XsX3zB
const float F3 =  0.3333333;
const float G3 =  0.1666667;

vec3 random3(vec3 c) {
    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
    vec3 r;
    r.z = fract(512.0*j);
    j *= .125;
    r.x = fract(512.0*j);
    j *= .125;
    r.y = fract(512.0*j);
    return r-0.5;
}

float simplex3d(vec3 p) {
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 
	 vec4 w, d;
	 
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 w = max(0.6 - w, 0.0);
	 
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 w *= w;
	 w *= w;
	 d *= w;
	 
	 return dot(d, vec4(52.0));
}

float fbm(vec3 p)
{
	float f = 0.0;	
	float frequency = complexity1;
	float amplitude = complexity2;
	for (int i = 0; i < 5; i++)
	{
		f += simplex3d(p * frequency) * amplitude;
		amplitude *= 0.5;
		frequency *= complexity3 + float(i) / 100.0;
	}
	return min(f, 1.0);
}

void main(void)
{
    //Setup coordinates
    vec2 uv = 1.0 - gl_FragCoord.xy / iResolution.xy;
    vec2 coord = 1.0 - uv * 2.0;
    uv.x = 1.0 - abs(1.0 - uv.x * 2.0);
    vec3 p = vec3(uv, iTime * speed);
    
    //Sample a noise function
    float blot = fbm(p * 3.0 + 8.0);
    float shade = fbm(p * 2.0 + 16.0);
    
    //Threshold
    blot = (blot + (sqrt(uv.x) - abs(0.5 - uv.y)));
    blot = smoothstep(0.6, 0.7, blot) * max(1.0 - shade * shadeContrast, 0.0);
    
    //Color
    gl_FragColor = vec4(mix(paperColor, inkColor, blot), 1.0);
    gl_FragColor.rgb *= 1.0 - pow(max(length(coord) - 0.5, 0.0), 5.0);
}


///END SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////////

]]>
		</program>
	</language>
</jittershader>
