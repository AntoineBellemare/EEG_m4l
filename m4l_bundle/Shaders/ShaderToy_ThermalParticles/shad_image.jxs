<jittershader name="default">
	<description> Default Slab </description>
	<param name="iChannel0" type="int" default="0" />
	<param name="iChannel1" type="int" default="1" />
	<param name="iResolution" type="vec2" state="VIEWPORT" />
	<param name="iMouse"    type="vec3" default="0.0 0.0 0.0" />
	<param name="iFrame"    type="int"  default="0" />
	
	<language name="glsl" version="1.2">
	
		<bind param="iChannel0" program="fp" />	
		<bind param="iChannel1" program="fp" />	
		<bind param="iResolution" program="fp" />
		<bind param="iMouse"    program="fp" />
		<bind param="iFrame"   program="fp" />
			
		<program name="vp" type="vertex">
<![CDATA[

varying vec2 texcoord;

void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[

varying vec2 texcoord;

uniform sampler2DRect iChannel0;
uniform samplerCube   iChannel1;

uniform vec2 iResolution;
uniform vec3 iMouse;
uniform int iFrame;

// Voronoi based particle tracking

vec2 R;
vec4 T ( vec2 U ) {return texture2DRect(iChannel0,U);}
void main(void)
{	
	vec4 C = vec4(0.0);
	vec2 U = texcoord;
	
    vec2 R = iResolution.xy;
    vec4 
        a = T(U+vec2(1,0)),
        b = T(U-vec2(1,0)),
        c = T(U+vec2(0,1)),
        d = T(U-vec2(0,1));
        
    vec4 g = vec4(a.zw-b.zw,c.zw-d.zw);
    vec2 dz = g.xz;
    vec2 dw = g.yw;
   	vec4 v = T(U);
    C.xyz = 0.5-0.5*cos(2.*v.z+2.*v.w*vec3(1,2,3));
    vec3 n = normalize(vec3(dz,.05));
    vec4 tx = vec4(.6,.9,1,1)*textureCube(iChannel1,reflect(vec3(0,0,1),n));
    C = (C*0.8+0.2)*(0.7+0.3*tx);

	gl_FragColor = C;
}

]]>
		</program>
	</language>
</jittershader>
