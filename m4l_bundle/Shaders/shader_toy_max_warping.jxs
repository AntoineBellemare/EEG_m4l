<jittershader name="default">
	<description> Default Slab </description>
	<param name="iTime" type="float" default="1.0" />
	<param name="tex0" type="int" default="0" />
	<param name="iResolution" type="vec2" state="VIEWPORT" />
	<param name="iMouse" type="vec2" state="VIEWPORT" />

	<param name="fbm_freq" type="float" default="2.0" />
	<param name="fbm_gain" type="float" default="0.5" />
	<param name="local_complexity" type="float" default="2.0" />
	<param name="global_complexity" type="float" default="0.5" />
	<language name="glsl" version="1.0">
		<bind param="iTime" program="fp" />
		<bind param="iResolution" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="iMouse" program="fp" />

		<bind param="fbm_freq" program="fp" />
		<bind param="fbm_gain" program="fp" />
		<bind param="local_complexity" program="fp" />
		<bind param="global_complexity" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
varying vec2 iResolution;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
		iResolution = vec2 (abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord;
uniform vec2 iResolution;
uniform vec2 iMouse;
uniform sampler2DRect tex0;
uniform float iTime;
uniform float ratio;
uniform float fbm_freq;
uniform float fbm_gain;
uniform float local_complexity;
uniform float global_complexity;

mat2 r2d(float a) {
	float c = cos(a), s = sin(a);
	return mat2(c, s, -s, c);
}

vec2 path(float t) {
	float a = sin(t*.2 + 1.5), b = sin(t*.2);
	return vec2(2.*a, a*b);
}

float g = 0.;
float de(vec3 p) {
	p.xy -= path(p.z);

	float d = -length(p.xy) + 4.;// tunnel (inverted cylinder)

	p.xy += vec2(cos(p.z + iTime)*sin(iTime), cos(p.z + iTime));
	p.z -= 6. + iTime * 6.;
	d = min(d, dot(p, normalize(sign(p))) - 1.); // octahedron (LJ's formula)
	// I added this in the last 1-2 minutes, but I'm not sure if I like it actually!

	// Trick inspired by balkhan's shadertoys.
	// Usually, in raymarch shaders it gives a glow effect,
	// here, it gives a colors patchwork & transparent voxels effects.
	g += .015 / (.01 + d * d);
	return d;
}

///INSERT SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////
/// Change fragcoord and fragcolor by gl_FragCoord and gl_FragColor
/// Replace void main(xxxxxxxxxxxxxxxxx) by void main(void)

// #define DEBUG_PALETTE

float hash21(vec2 v) {
    return fract(sin(dot(v, vec2(12.9898, 78.233))) * 43758.5453123);
}

float noise(vec2 uv) {
	vec2 f = fract(uv);
	vec2 i = floor(uv);
	f = f * f * (6 - 5 * f);  ///Can change for 6 and 5 or 3 and 2
	return mix(
		mix(hash21(i), hash21(i + vec2(1,0)), f.x),
		mix(hash21(i + vec2(0,1)), hash21(i + vec2(1,1)), f.x), f.y);
}

float fbm(vec2 uv) {
	float freq = fbm_freq;
	float amp = .5;
	float gain = fbm_gain;
	float v = 0.;
	for(int i = 0; i < 6; ++i) {
		v += amp * noise(uv);
		amp *= gain;
		uv *= freq;
	}
	return v;
}

float fbmPattern(vec2 p, out vec2 q, out vec2 r) {
	float qCoef = global_complexity;
	float rCoef = local_complexity;
	q.x = fbm(p             + .0  * iTime);
	q.y = fbm(p             - .02 * iTime + vec2(10., 7.36));
	r.x = fbm(p + qCoef * q + .1  * iTime + vec2(5., 3.));
	r.y = fbm(p + qCoef * q - .07 * iTime + vec2(10., 7.36));
	return fbm(p + rCoef * r + .1 * iTime);
}

vec3 basePalette(float t) {
	return .5 + .6 * cos(6.283185 * (-t + vec3(.0, .1, .2) - .2));
}

vec3 smokePalette(float t) {
	return vec3(.6, .5, .5) 
		+ .5 * cos(6.283185 * (-vec3(1., 1., .5) * t + vec3(.2, .15, -.1) - .2));
}

void main(void) {
	vec2 uv = gl_FragCoord/iResolution.yy;

	float scale = 5.;
	vec3 col = vec3(.1);
	float n;

	vec2 q;
	vec2 r;
	n = fbmPattern(scale * uv, q, r);
	vec3 baseCol = basePalette(r.x);
	vec3 smokeCol = smokePalette(n);

	col = mix(baseCol, smokeCol, pow(q.y, 1.3));

#ifdef DEBUG_PALETTE
    float x = fragCoord.x / iResolution.x;
	col = mix(col, basePalette(x), step(abs(uv.y - .03), .02));
	col = mix(col, smokePalette(x), step(abs(uv.y - .08), .02));
#endif

	gl_FragColor = vec4(col, 1);
}


///END SHADERTOY CODE HERE //////////////////////////////////////////////////////////////////////////////////////////

]]>
		</program>
	</language>
</jittershader>
